# Appendix A Essential and useful other programs under a Unix-alike
<p>This appendix gives details of programs you will need to build R on Unix-like platforms, or which will be used by R if found by <code class="calibre6">configure</code>.</p>
<p>Remember that some package management systems (such as RPM and Debian/Ubuntu’s) make a distinction between the user version of a package and the development version. The latter usually has the same name but with the extension ‘-devel’ or ‘-dev’: you need both versions installed.</p>
<hr />
<p><a href="" id="Essential-programs-and-libraries"></a> <a href="" id="Essential-programs-and-libraries-1"></a></p>
<h3 id="a.1-essential-programs-and-libraries" class="section">A.1 Essential programs and libraries</h3>
<p>You need a means of compiling C and FORTRAN 90 (see <a href="appendix-a-essential-and-useful-other-programs-under-a-unix-alike.html#Using-FORTRAN">Using FORTRAN</a>). Your C compiler should be ISO/IEC 60059<a href="environment-variable-index.html#FOOT37" id="DOCF37"><sup>37</sup></a>, POSIX 1003.1 and C99-compliant.<a href="environment-variable-index.html#FOOT38" id="DOCF38"><sup>38</sup></a> R tries to choose suitable flags<a href="environment-variable-index.html#FOOT39" id="DOCF39"><sup>39</sup></a> for the C compilers it knows about, but you may have to set <code class="calibre6">CC</code> or <code class="calibre6">CFLAGS</code> suitably. For versions of <code class="calibre6">gcc</code> prior to 5.1 with <code class="calibre6">glibc</code> this means including -std=gnu99<a href="environment-variable-index.html#FOOT40" id="DOCF40"><sup>40</sup></a>. (Note that options essential to run the compiler even for linking, such as those to set the architecture, should be specified as part of <code class="calibre6">CC</code> rather than in <code class="calibre6">CFLAGS</code>.)</p>
<p>Unless you do not want to view graphs on-screen (or use macOS) you need ‘X11’ installed, including its headers and client libraries. For recent Fedora/RedHat distributions it means (at least) RPMs ‘libX11’, ‘libX11-devel’, ‘libXt’ and ‘libXt-devel’. On Debian/Ubuntu we recommend the meta-package ‘xorg-dev’. If you really do not want these you will need to explicitly configure R without X11, using --with-x=no.</p>
<p>The command-line editing (and command completion) depends on the GNU <code class="calibre6">readline</code> library (including its headers): version 4.2 or later is needed for all the features to be enabled. Otherwise you will need to configure with --with-readline=no (or equivalent).</p>
<p>A suitably comprehensive <code class="calibre6">iconv</code> function is essential. The R usage requires <code class="calibre6">iconv</code> to be able to translate between <code class="calibre6">&quot;latin1&quot;</code> and <code class="calibre6">&quot;UTF-8&quot;</code>, to recognize <code class="calibre6">&quot;&quot;</code> (as the current encoding) and <code class="calibre6">&quot;ASCII&quot;</code>, and to translate to and from the Unicode wide-character formats <code class="calibre6">&quot;UCS-[24][BL]E&quot;</code> — this is true by default for <code class="calibre6">glibc</code><a href="environment-variable-index.html#FOOT41" id="DOCF41"><sup>41</sup></a> but not of most commercial Unixes. However, you can make use of GNU <code class="calibre6">libiconv</code> (as used on macOS: see <a href="https://www.gnu.org/software/libiconv/" class="uri">https://www.gnu.org/software/libiconv/</a>).</p>
<p>The OS needs to have enough support<a href="environment-variable-index.html#FOOT42" id="DOCF42"><sup>42</sup></a> for wide-character types: this is checked at configuration. A small number of POSIX functions<a href="environment-variable-index.html#FOOT43" id="DOCF43"><sup>43</sup></a> are essential, and others<a href="environment-variable-index.html#FOOT44" id="DOCF44"><sup>44</sup></a> will be used if available.</p>
<p>Installations of <code class="calibre6">zlib</code> (version 1.2.5 or later), <code class="calibre6">libbz2</code> (version 1.0.6 or later: called <strong>bzip2-libs</strong>/<strong>bzip2-devel</strong> or <strong>libbz2-1.0</strong>/<strong>libbz2-dev</strong> by some Linux distributions), <code class="calibre6">liblzma</code><a href="environment-variable-index.html#FOOT45" id="DOCF45"><sup>45</sup></a> version 5.0.3 or later are required.</p>
<p>PCRE<a href="environment-variable-index.html#FOOT46" id="DOCF46"><sup>46</sup></a> (version 8.32 or later, although versions 8.20–8.31 will be accepted with a deprecation warning) is required (or just its library and headers if packaged separately). Only the ‘8-bit’ interface is used (and only that is built by default when installing from sources). PCRE must be built with UTF-8 support (not the default, and checked by <code class="calibre6">configure</code>) and support for Unicode properties is assumed by some R packages. JIT support (optionally available) is desirable for the best performance: support for this and Unicode properties can be checked at run-time by calling <code class="calibre6">pcre_config()</code>. If building PCRE for use with R a suitable <code class="calibre6">configure</code> command might be</p>
<div class="example">
<pre class="example1"><code>./configure --enable-utf --enable-unicode-properties --enable-jit --disable-cpp</code></pre>
</div>
<p>The --enable-jit flag is supported for most common CPUs. (See also the comments for Solaris.)</p>
<p>Library <code class="calibre6">libcurl</code> (version 7.22.0 or later<a href="environment-variable-index.html#FOOT47" id="DOCF47"><sup>47</sup></a>) is required, with at least 7.28.0 being desirable. Information on <code class="calibre6">libcurl</code> is found from the <code class="calibre6">curl-config</code> script: if that is missing or needs to be overridden<a href="environment-variable-index.html#FOOT48" id="DOCF48"><sup>48</sup></a> there are macros to do so described in file config.site.</p>
<p>A <code class="calibre6">tar</code> program is needed to unpack the sources and packages (including the recommended packages). A version<a href="environment-variable-index.html#FOOT49" id="DOCF49"><sup>49</sup></a> that can automagically detect compressed archives is preferred for use with <code class="calibre6">untar()</code>: the configure script looks for <code class="calibre6">gtar</code> and <code class="calibre6">gnutar</code> before <a href="" id="index-TAR"></a> <code class="calibre6">tar</code> – use environment variable <code class="calibre6">TAR</code> to override this.</p>
<p>There need to be suitable versions of the tools <code class="calibre6">grep</code> and <code class="calibre6">sed</code>: the problems are usually with old AT&amp;T and BSD variants. <code class="calibre6">configure</code> will try to find suitable versions (including looking in /usr/xpg4/bin which is used on some commercial Unixes).</p>
<p>You will not be able to build most of the manuals unless you have <code class="calibre6">texi2any</code> version 5.1 or later installed, and if not most of the HTML manuals will be linked to a version on CRAN. To make PDF versions of the manuals you will also need file texinfo.tex installed (which is part of the GNU <strong>texinfo</strong> distribution but is often made part of the TeX package in re-distributions) as well as <code class="calibre6">texi2dvi</code>.<a href="environment-variable-index.html#FOOT50" id="DOCF50"><sup>50</sup></a> Further, the versions of <code class="calibre6">texi2dvi</code> and texinfo.tex need to be compatible: we have seen problems with older TeX distributions.</p>
<p><a href="" id="index-Subversion-1"></a></p>
<p>If you want to build from the R Subversion repository then <code class="calibre6">texi2any</code> is highly recommended as it is used to create files which are in the tarball but not stored in the Subversion repository.</p>
<p><a href="" id="index-Vignettes"></a></p>
<p>The PDF documentation (including doc/NEWS.pdf) and building vignettes needs <code class="calibre6">pdftex</code> and <code class="calibre6">pdflatex</code>. We require LaTeX version <code class="calibre6">2005/12/01</code> or later (for UTF-8 support). Building PDF package manuals (including the R reference manual) and vignettes is sensitive to the version of the LaTeX package <strong>hyperref</strong> and we recommend that the TeX distribution used is kept up-to-date. A number of standard LaTeX packages are required (including <strong>url</strong> and some of the font packages such as <strong>times</strong>, <strong>helvetic</strong>, <strong>ec</strong> and <strong>cm-super</strong>) and others such as <strong>hyperref</strong> and <strong>inconsolata</strong> are desirable (and without them you may need to change R’s defaults: see <a href="installing-r-under-unix-alikes.html#Making-the-manuals">Making the manuals</a>). Note that package <strong>hyperref</strong> (currently) requires packages <strong>kvoptions</strong>, <strong>ltxcmds</strong> and <strong>refcount</strong>. For distributions based on TeX Live the simplest approach may be to install collections <strong>collection-latex</strong>, <strong>collection-fontsrecommended</strong>, <strong>collection-latexrecommended</strong>, <strong>collection-fontsextra</strong> and <strong>collection-latexextra</strong> (assuming they are not installed by default): Fedora uses names like <strong>texlive-collection-fontsextra</strong> and Debian/Ubuntu like <strong>texlive-fonts-extra</strong>.</p>
<p><a href="" id="index-PATH"></a></p>
<p>The essential programs should be in your <code class="calibre6">PATH</code> at the time <code class="calibre6">configure</code> is run: this will capture the full paths.</p>
<p>Those distributing binary versions of R may need to be aware of the licences of the external libraries it is linked to (including ‘useful’ libraries from the next section). The <code class="calibre6">liblzma</code> library is in the public domain and X11, <code class="calibre6">libbzip2</code>, <code class="calibre6">libcurl</code> and <code class="calibre6">zlib</code> have MIT-style licences. PCRE has a BSD-style licence which requires distribution of the licence (included in R’s COPYRIGHTS file) in binary distributions. GNU <code class="calibre6">readline</code> is licensed under GPL (which version(s) depending on the <code class="calibre6">readline</code> version).</p>
<hr />
<p><a href="" id="Useful-libraries-and-programs"></a> <a href="" id="Useful-libraries-and-programs-1"></a></p>
<h3 id="a.2-useful-libraries-and-programs" class="section">A.2 Useful libraries and programs</h3>
<p>The ability to use translated messages makes use of <code class="calibre6">gettext</code> and most likely needs GNU <code class="calibre6">gettext</code>: you do need this to work with new translations, but otherwise the version contained in the R sources will be used if no suitable external <code class="calibre6">gettext</code> is found.</p>
<p>The ‘modern’ version of the <code class="calibre6">X11()</code>, <code class="calibre6">jpeg()</code>, <code class="calibre6">png()</code> and <code class="calibre6">tiff()</code> graphics devices uses the <code class="calibre6">cairo</code> and (optionally) <code class="calibre6">Pango</code> libraries. Cairo version 1.2.0 or later is required. Pango needs to be at least version 1.10, and 1.12 is the earliest version we have tested. (For Fedora users we believe the <code class="calibre6">pango-devel</code> RPM and its dependencies suffice.) R checks for <code class="calibre6">pkg-config</code>, and uses that to check first that the ‘pangocairo’ package is installed (and if not, ‘cairo’) and if additional flags are needed for the ‘cairo-xlib’ package, then if suitable code can be compiled. These tests will fail if <code class="calibre6">pkg-config</code> is not installed<a href="environment-variable-index.html#FOOT51" id="DOCF51"><sup>51</sup></a>, and are likely to fail if <code class="calibre6">cairo</code> was built statically (unusual). Most systems with <code class="calibre6">Gtk+</code> 2.8 or later installed will have suitable libraries</p>
<p>For the best font experience with these devices you need suitable fonts installed: Linux users will want the <code class="calibre6">urw-fonts</code> package. On platforms which have it available, the <code class="calibre6">msttcorefonts</code> package<a href="environment-variable-index.html#FOOT52" id="DOCF52"><sup>52</sup></a> provides TrueType versions of Monotype fonts such as Arial and Times New Roman. Another useful set of fonts is the ‘liberation’ TrueType fonts available at <a href="https://fedorahosted.org/liberation-fonts/" class="uri">https://fedorahosted.org/liberation-fonts/</a>,<a href="environment-variable-index.html#FOOT53" id="DOCF53"><sup>53</sup></a> which cover the Latin, Greek and Cyrillic alphabets plus a fair range of signs. These share metrics with Arial, Times New Roman and Courier New, and contain fonts rather similar to the first two (<a href="https://en.wikipedia.org/wiki/Liberation_fonts" class="uri">https://en.wikipedia.org/wiki/Liberation_fonts</a>). Then there is the ‘Free UCS Outline Fonts’ project (<a href="https://www.gnu.org/software/freefont/" class="uri">https://www.gnu.org/software/freefont/</a>) which are OpenType/TrueType fonts based on the URW fonts but with extended Unicode coverage. See the R help on <code class="calibre6">X11</code> on selecting such fonts.</p>
<p>The bitmapped graphics devices <code class="calibre6">jpeg()</code>, <code class="calibre6">png()</code> and <code class="calibre6">tiff()</code> need the appropriate headers and libraries installed: <code class="calibre6">jpeg</code> (version 6b or later, or <code class="calibre6">libjpeg-turbo</code>) or <code class="calibre6">libpng</code> (version 1.2.7 or later) and <code class="calibre6">zlib</code> or <code class="calibre6">libtiff</code> (any recent version – 3.9.[4567] and 4.0.[23] have been tested) respectively. They also need support for either <code class="calibre6">X11</code> or <code class="calibre6">cairo</code> (see above). Should support for these devices <strong>not</strong> be required or broken system libraries need to be avoided there are <code class="calibre6">configure</code> options --without-libpng, --without-jpeglib and --without-libtiff. For most system installations the TIFF libraries will require JPEG libraries to be present and perhaps linked explicitly, so --without-jpeglib may also disable the <code class="calibre6">tiff()</code> device. The <code class="calibre6">tiff()</code> devices only require a basic build of <code class="calibre6">libtiff</code> (not even JPEG support is needed). Recent versions allow several other libraries to be linked into <code class="calibre6">libtiff</code> such as <code class="calibre6">lzma</code>, <code class="calibre6">jbig</code> and <code class="calibre6">jpeg12</code>, and these may need also to be present.</p>
<p>Option --with-system-tre is also available: it needs a recent version of TRE. (The current sources are in the <code class="calibre6">git</code> repository at <a href="https://github.com/laurikari/tre/" class="uri">https://github.com/laurikari/tre/</a>, but at the time of writing the resulting build will not pass its checks.).</p>
<p>An implementation of XDR is required, and the R sources contain one which is likely to suffice (although a system version may have higher performance). XDR is part of RPC and historically has been part of libc on a Unix-alike. However some builds of <code class="calibre6">glibc</code> hide it with the intention that the TI-RPC library be used instead, in which case <code class="calibre6">libtirpc</code> (and its development version) needs to be installed, and its headers need to be on the C include path or in /usr/include/tirpc.</p>
<p>Use of the X11 clipboard selection requires the <code class="calibre6">Xmu</code> headers and libraries. These are normally part of an X11 installation (e.g. the Debian meta-package ‘xorg-dev’), but some distributions have split this into smaller parts, so for example recent versions of Fedora require the ‘libXmu’ and ‘libXmu-devel’ RPMs.</p>
<p>Some systems (notably macOS and at least some FreeBSD systems) have inadequate support for collation in multibyte locales. It is possible to replace the OS’s collation support by that from ICU (International Components for Unicode, <a href="http://site.icu-project.org/" class="uri">http://site.icu-project.org/</a>), and this provides much more precise control over collation on all systems. ICU is available as sources and as binary distributions for (at least) most Linux distributions, Solaris, FreeBSD and AIX, usually as <code class="calibre6">libicu</code> or <code class="calibre6">icu4c</code>. It will be used by default where available: should a very old or broken version of ICU be found this can be suppressed by --without-ICU.</p>
<p>The <code class="calibre6">bitmap</code> and <code class="calibre6">dev2bitmap</code> devices and function <code class="calibre6">embedFonts()</code> use ghostscript (<a href="http://www.ghostscript.com/" class="uri">http://www.ghostscript.com/</a>). This should either be in your path when the command is run, or its full path specified by the environment variable <code class="calibre6">R_GSCMD</code> at that time. <a href="" id="index-R_005fGSCMD"></a></p>
<hr />
<p><a href="" id="Tcl_002fTk"></a> <a href="" id="Tcl_002fTk-1"></a></p>
<h4 id="a.2.1-tcltk" class="subsection">A.2.1 Tcl/Tk</h4>
<p>The <strong>tcltk</strong> package needs Tcl/Tk ≥ 8.4 installed: the sources are available at <a href="https://www.tcl.tk/" class="uri">https://www.tcl.tk/</a>. To specify the locations of the Tcl/Tk files you may need the configuration options</p>
<dl>
<dt>--with-tcltk</dt>
<dd><p>use Tcl/Tk, or specify its library directory</p>
</dd>
<dt>--with-tcl-config=TCL_CONFIG</dt>
<dd><p>specify location of tclConfig.sh</p>
</dd>
<dt>--with-tk-config=TK_CONFIG</dt>
<dd><p>specify location of tkConfig.sh</p>
</dd>
</dl>
<p>or use the configure variables <code class="calibre6">TCLTK_LIBS</code> and <code class="calibre6">TCLTK_CPPFLAGS</code> to specify the flags needed for linking against the Tcl and Tk libraries and for finding the tcl.h and tk.h headers, respectively. If you have both 32- and 64-bit versions of Tcl/Tk installed, specifying the paths to the correct config files may be necessary to avoid confusion between them.</p>
<p>Versions of Tcl/Tk up to 8.5.19 and 8.6.4 have been tested (including most versions of 8.4.x, but not recently).</p>
<p>Note that the tk.h header includes<a href="environment-variable-index.html#FOOT54" id="DOCF54"><sup>54</sup></a> X11 headers, so you will need X11 and its development files installed.</p>
<hr />
<p><a href="" id="Java-support"></a> <a href="" id="Java-support-1"></a></p>
<h4 id="a.2.2-java-support" class="subsection">A.2.2 Java support</h4>
<p>The build process looks for Java support on the host system, and if it finds it sets some settings which are useful for Java-using packages (such as <a href="https://CRAN.R-project.org/package=rJava"><strong>rJava</strong></a> and <a href="https://CRAN.R-project.org/package=JavaGD"><strong>JavaGD</strong></a>). This check can be suppressed by configure option --disable-java. <a href="" id="index-JAVA_005fHOME"></a> Configure variable <code class="calibre6">JAVA_HOME</code> can be set to point to a specific JRE/JDK, on the <code class="calibre6">configure</code> command line or in the environment.</p>
<p>Principal amongst these settings are some library paths to the Java libraries and JVM, which are stored in environment variable <a href="" id="index-R_005fJAVA_005fLD_005fLIBRARY_005fPATH"></a> <code class="calibre6">R_JAVA_LD_LIBRARY_PATH</code> in file R_HOME/etc/ldpaths (or a sub-architecture-specific version). A typical setting for ‘x86_64’ Linux is</p>
<div class="example">
<pre class="example1"><code>JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.71-1.b15.fc22.x86_64/jre
R_JAVA_LD_LIBRARY_PATH=${JAVA_HOME}/lib/that/server</code></pre>
</div>
<p>Unfortunately this depends on the exact version of the JRE/JDK installed, and so may need updating if the Java installation is updated. This can be done by running <code class="calibre6">R CMD javareconf</code> which updates settings in both R_HOME/etc/Makeconf and R_HOME/etc/ldpaths. See <code class="calibre6">R CMD javareconf --help</code> for details: note that this needs to be done by the account owning the R installation.</p>
<p>Another way of overriding those settings is to set the environment variable <a href="" id="index-R_005fJAVA_005fLD_005fLIBRARY_005fPATH-1"></a> <code class="calibre6">R_JAVA_LD_LIBRARY_PATH</code> (before R is started, hence not in ~/.Renviron), which suffices to run already-installed Java-using packages. For example</p>
<div class="example">
<pre class="example1"><code>R_JAVA_LD_LIBRARY_PATH=/usr/lib/jvm/java-1.8.0/jre/lib/amd64/server</code></pre>
</div>
<p>It may be possible to avoid this by specifying an invariant link as the path when configuring. For example, on that system any of</p>
<div class="example">
<pre class="example1"><code>JAVA_HOME=/usr/lib/jvm/java
JAVA_HOME=/usr/lib/jvm/java-1.8.0
JAVA_HOME=/usr/lib/jvm/java-1.8.0/jre</code></pre>
</div>
<p>worked.</p>
<hr />
<p><a href="" id="Other-compiled-languages"></a> <a href="" id="Other-compiled-languages-1"></a></p>
<h4 id="a.2.3-other-compiled-languages" class="subsection">A.2.3 Other compiled languages</h4>
<p>Some add-on packages need a C++ compiler. This is specified by the configure variables <code class="calibre6">CXX</code>, <code class="calibre6">CXXFLAGS</code> and similar. <code class="calibre6">configure</code> will normally find a suitable compiler. However, in many cases this will be a C++98 compiler, and it is possible to specify an alternative compiler for use with C++11 by the configure variables <code class="calibre6">CXX11</code>, <code class="calibre6">CXX11STD</code>, <code class="calibre6">CXX11FLAGS</code> and similar (see <a href="installing-r-under-unix-alikes.html#C_002b_002b-Support">C++ Support</a>). Again, <code class="calibre6">configure</code> will normally find a suitable value for <code class="calibre6">CXX11STD</code> if the compiler given by <code class="calibre6">CXX</code> is capable of compiling C++11 code, but it is possible that a completely different compiler will be needed.</p>
<p>Other packages need full Fortran 90 (or later) support. For source files with extension .f90 or .f95, the compiler defined by the macro <code class="calibre6">FC</code> is used by <code class="calibre6">R CMD INSTALL</code>. This is found when R is configured and is often the same as <code class="calibre6">F77</code>: note that it is detected by the name of the command without a test that it can actually compile Fortran 90 code. Set the configure variable <code class="calibre6">FC</code> to override this if necessary: variables <code class="calibre6">FCFLAGS</code>, <code class="calibre6">FCPICFLAGS</code>, <code class="calibre6">FCLIBS</code>, <code class="calibre6">SHLIB_FCLD</code> and <code class="calibre6">SHLIB_FCLDFLAGS</code> might also need to be set.</p>
<p>See file config.site in the R source for more details about these variables.</p>
<hr />
<p><a href="" id="Linear-algebra"></a> <a href="" id="Linear-algebra-1"></a></p>
<h3 id="a.3-linear-algebra" class="section">A.3 Linear algebra</h3>
<p><a href="" id="index-BLAS-library"></a></p>
<hr />
<p><a href="" id="BLAS"></a> <a href="" id="BLAS-1"></a></p>
<h4 id="a.3.1-blas" class="subsection">A.3.1 BLAS</h4>
<p>The linear algebra routines in R can make use of enhanced BLAS (Basic Linear Algebra Subprograms, <a href="http://www.netlib.org/blas/faq.html" class="uri">http://www.netlib.org/blas/faq.html</a>) routines. However, these have to be explicitly requested at configure time: R provides an internal BLAS which is well-tested and will be adequate for most uses of R.</p>
<p>You can specify a particular BLAS library <em>via</em> a value for the configuration option --with-blas and not to use an external BLAS library by --without-blas (the default). If --with-blas is given with no <code class="calibre6">=</code>, its value is taken from the <a href="" id="index-BLAS_005fLIBS"></a> environment variable <code class="calibre6">BLAS_LIBS</code>, set for example in config.site. If neither the option nor the environment variable supply a value, a search is made for a suitable BLAS. If the value is not obviously a linker command (starting with a dash or giving the path to a library), it is prefixed by ‘-l’, so</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;foo&quot;</code></pre>
</div>
<p>is an instruction to link against ‘-lfoo’ to find an external BLAS (which needs to be found both at link time and run time).</p>
<p>The configure code checks that the external BLAS is complete (it must include all double precision and double complex routines, as well as <code class="calibre6">LSAME</code>), and appears to be usable. However, an external BLAS has to be usable from a shared object (so must contain position-independent code), and that is not checked.</p>
<p>Some enhanced BLASes are compiler-system-specific (<code class="calibre6">sunperf</code> on Solaris<a href="environment-variable-index.html#FOOT55" id="DOCF55"><sup>55</sup></a>, <code class="calibre6">libessl</code> on IBM, <code class="calibre6">Accelerate</code> on macOS). The correct incantation for these is often found <em>via</em> --with-blas with no value on the appropriate platforms.</p>
<p>Some of the external BLASes are multi-threaded. One issue is that R profiling (which uses the <code class="calibre6">SIGPROF</code> signal) may cause problems, and you may want to disable profiling if you use a multi-threaded BLAS. Note that using a multi-threaded BLAS can result in taking more CPU time and even more elapsed time (occasionally dramatically so) than using a similar single-threaded BLAS. On a machine running other tasks, there can be contention for CPU caches that reduces the effectiveness of the optimization of cache use by a BLAS implementation.</p>
<p>Note that under Unix (but not under Windows) if R is compiled against a non-default BLAS and --enable-BLAS-shlib is <strong>not</strong> used, then all BLAS-using packages must also be. So if R is re-built to use an enhanced BLAS then packages such as <a href="https://CRAN.R-project.org/package=quantreg"><strong>quantreg</strong></a> will need to be re-installed.</p>
<p>R relies on ISO/IEC 60559 compliance of an external BLAS. This can be broken if for example the code assumes that terms with a zero factor are always zero and do not need to be computed—whereas <code class="calibre6">x*0</code> can be <code class="calibre6">NaN</code>. This is checked in the test suite.</p>
<p>External BLAS implementations often make less use of extended-precision floating-point registers and will almost certainly re-order computations. This can result in less accuracy than using the internal BLAS, and may result in different solutions, e.g. different signs in SVD and eigendecompositions.</p>
<p>The URIs for several of these BLAS are subject to frequent gratuitous changes, so you will need to search for their current locations.</p>
<hr />
<p><a href="" id="ATLAS"></a> <a href="" id="ATLAS-1"></a></p>
<h4 id="a.3.1.1-atlas" class="subsection">A.3.1.1 ATLAS</h4>
<p>ATLAS (<a href="http://math-atlas.sourceforge.net/" class="uri">http://math-atlas.sourceforge.net/</a>) is a “tuned” BLAS that runs on a wide range of Unix-alike platforms. Unfortunately it is built by default as a static library that on some platforms cannot be used with shared objects such as are used in R packages. Be careful when using pre-built versions of ATLAS (they seem to work on ‘ix86’ platforms, but not always on ‘x86_64’ ones).</p>
<p>The usual way to specify ATLAS will be via</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-lf77blas -latlas&quot;</code></pre>
</div>
<p>if the libraries are in the library path, otherwise by</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-L/path/to/ATLAS/libs -lf77blas -latlas&quot;</code></pre>
</div>
<p>For example, ‘x86_64’ Fedora needs</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-L/usr/lib64/atlas -lf77blas -latlas&quot;</code></pre>
</div>
<p>For systems with multiple CPU cores it is possible to use a multi-threaded version of ATLAS, by specifying</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-lptf77blas -lpthread -latlas&quot;</code></pre>
</div>
<p>Consult its installation guide for how to build ATLAS with position-independent code, and as a shared library.</p>
<hr />
<p><a href="" id="ACML"></a> <a href="" id="ACML-1"></a></p>
<h4 id="a.3.1.2-acml" class="subsection">A.3.1.2 ACML</h4>
<p>For ‘x86_64’ processors<a href="environment-variable-index.html#FOOT56" id="DOCF56"><sup>56</sup></a> under Linux there is the AMD Core Math Library (ACML). For the <code class="calibre6">gcc</code> version we could use</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-lacml&quot;</code></pre>
</div>
<p>if the appropriate library directory (such as <a href="" id="index-LD_005fLIBRARY_005fPATH-1"></a> /opt/acml5.1.0/gfortran64/lib) is in the <code class="calibre6">LD_LIBRARY_PATH</code>. For other compilers, see the ACML documentation. There is a multithreaded Linux version of ACML available for recent versions of <code class="calibre6">gfortran</code>. To make use of this you will need something like</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-L/opt/acml5.1.0/gfortran64_mp/lib -lacml_mp&quot;</code></pre>
</div>
<p>(and you may need to arrange for the directory to be in <code class="calibre6">ld.so</code> cache).</p>
<p>See see <a href="#Shared-BLAS">Shared BLAS</a> for an alternative (and in many ways preferable) way to use ACML.</p>
<p>The version last tested (5.1.0) failed the reg-BLAS.R test in its handling of <code class="calibre6">NA</code>s.</p>
<hr />
<p><a href="" id="Goto-and-OpenBLAS"></a> <a href="" id="Goto-and-OpenBLAS-1"></a></p>
<h4 id="a.3.1.3-goto-and-openblas" class="subsection">A.3.1.3 Goto and OpenBLAS</h4>
<p>Dr Kazushige Goto wrote a tuned BLAS for several processors and OSes, which was frozen in mid-2010. The final version is known as GotoBLAS2, and was re-released under a much less restrictive licence. Once it is built and installed, it can be used by configuring R with</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-lgoto2&quot;</code></pre>
</div>
<p>See see <a href="#Shared-BLAS">Shared BLAS</a> for an alternative (and in many ways preferable) way to use it.</p>
<p>OpenBLAS (<a href="http://www.openblas.net/" class="uri">http://www.openblas.net/</a>) is a descendant project with support for some later CPUs (e.g. Intel Sandy Bridge). Once installed it can be used by something like</p>
<div class="example">
<pre class="example1"><code>--with-blas=&quot;-lopenblas&quot;</code></pre>
</div>
<p>or as a shared BLAS.</p>
<hr />
<p><a href="" id="MKL"></a> <a href="" id="Intel-MKL"></a></p>
<h4 id="a.3.1.4-intel-mkl" class="subsection">A.3.1.4 Intel MKL</h4>
<p>For Intel processors (and perhaps others) and some distributions of Linux, there is Intel’s Math Kernel Library. You are strongly encouraged to read the MKL User’s Guide, which is installed with the library, before attempting to link to MKL. This includes a ‘link line advisor’ which will suggest appropriate incantations: its use is recommended. Or see <a href="https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor" class="uri">https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor</a>.</p>
<p>There are also versions of MKL for macOS and Windows, but at the time these were tried they did not work with the standard compilers used for R on those platforms.</p>
<p>The MKL interface has changed several times and may change again: the following examples have been used with versions 10.3 to 11.3, for GCC compilers on ‘x86_64’.</p>
<p>To a sequential version of MKL we used</p>
<div class="example">
<pre class="example1"><code>MKL_LIB_PATH=/path/to/intel_mkl/lib/intel64
export LD_LIBRARY_PATH=$MKL_LIB_PATH
MKL=&quot;-L${MKL_LIB_PATH} -lmkl_gf_lp64 -lmkl_core -lmkl_sequential&quot;
./configure --with-blas=&quot;$MKL&quot; --with-lapack</code></pre>
</div>
<p>The option --with-lapack is used since MKL contains a tuned copy of LAPACK as well as BLAS (see <a href="#LAPACK">LAPACK</a>), although this can be omitted.</p>
<p>Threaded MKL may be used by replacing the line defining the variable <code class="calibre6">MKL</code> by</p>
<div class="example">
<pre class="example1"><code>MKL=&quot;-L${MKL_LIB_PATH} -lmkl_gf_lp64 -lmkl_core \
     -lmkl_gnu_thread -dl -lpthread&quot;</code></pre>
</div>
<p>The default number of threads will be chosen by the OpenMP software, but can be controlled by setting <code class="calibre6">OMP_NUM_THREADS</code> or <code class="calibre6">MKL_NUM_THREADS</code>, and in recent versions seems to default to a sensible value for sole use of the machine.</p>
<p>It has been reported that</p>
<div class="example">
<pre class="example1"><code>--with-blas=&#39;-mkl=parallel&#39; --with-lapack</code></pre>
</div>
<p>worked with the Intel 2015.3 compilers on Centos 6.</p>
<hr />
<p><a href="" id="Shared-BLAS"></a> <a href="" id="Shared-BLAS-1"></a></p>
<h4 id="a.3.1.5-shared-blas" class="subsection">A.3.1.5 Shared BLAS</h4>
<p>The BLAS library will be used for many of the add-on packages as well as for R itself. This means that it is better to use a shared/dynamic BLAS library, as most of a static library will be compiled into the R executable and each BLAS-using package.</p>
<p>R offers the option of compiling the BLAS into a dynamic library <code class="calibre6">libRblas</code> stored in R_HOME/lib and linking both R itself and all the add-on packages against that library.</p>
<p>This is the default on all platforms except AIX unless an external BLAS is specified and found: for the latter it can be used by specifying the option --enable-BLAS-shlib, and it can always be disabled via --disable-BLAS-shlib.</p>
<p>This has both advantages and disadvantages.</p>
<ul>
<li>It saves space by having only a single copy of the BLAS routines, which is helpful if there is an external static BLAS such as used to be standard for ATLAS.</li>
<li>There may be performance disadvantages in using a shared BLAS. Probably the most likely is when R’s internal BLAS is used and R is <em>not</em> built as a shared library, when it is possible to build the BLAS into R.bin (and libR.a) without using position-independent code. However, experiments showed that in many cases using a shared BLAS was as fast, provided high levels of compiler optimization are used.</li>
<li>It is easy to change the BLAS without needing to re-install R and all the add-on packages, since all references to the BLAS go through <code class="calibre6">libRblas</code>, and that can be replaced. Note though that any dynamic libraries the replacement links to will need to be found by the linker: this may need the library path to be changed in R_HOME/etc/ldpaths.</li>
</ul>
<p>Another option to change the BLAS in use is to symlink a dynamic BLAS library (such as ACML or Goto’s) to R_HOME/lib/libRblas.so. For example, just</p>
<div class="example">
<pre class="example1"><code>mv R_HOME/lib/libRblas.so R_HOME/lib/libRblas.so.keep
ln -s /opt/acml5.1.0/gfortran64_mp/lib/libacml_mp.so R_HOME/lib/libRblas.so</code></pre>
</div>
<p>will change the BLAS in use to multithreaded ACML. A similar link works for some versions of Goto BLAS, OpenBLAS and MKL (provided the appropriate lib directory is in the run-time library path or <code class="calibre6">ld.so</code> cache).</p>
<hr />
<p><a href="" id="LAPACK"></a> <a href="" id="LAPACK-1"></a></p>
<h4 id="a.3.2-lapack" class="subsection">A.3.2 LAPACK</h4>
<p><a href="" id="index-LAPACK-library"></a></p>
<p>Provision is made for using an external LAPACK library, principally to cope with BLAS libraries which contain a copy of LAPACK (such as <code class="calibre6">sunperf</code> on Solaris, <code class="calibre6">Accelerate</code> on macOS and ACML and MKL on ‘ix86’/‘x86_64’ Linux). At least LAPACK version 3.2 is required. This can only be done if --with-blas has been used.</p>
<p>However, the likely performance gains are thought to be small (and may be negative), and the default is not to search for a suitable LAPACK library, and this is definitely <strong>not</strong> recommended. You can specify a specific LAPACK library or a search for a generic library by the configuration option --with-lapack. The default for --with-lapack is to check the BLAS library and then look for an external library ‘-llapack’. Sites searching for the fastest possible linear algebra may want to build a LAPACK library using the ATLAS-optimized subset of LAPACK. To do so specify something like</p>
<div class="example">
<pre class="example1"><code>--with-lapack=&quot;-L/path/to/ATLAS/libs -llapack -lcblas&quot;</code></pre>
</div>
<p>since the ATLAS subset of LAPACK depends on <code class="calibre6">libcblas</code>. A value for --with-lapack can be set <em>via</em> the environment variable <a href="" id="index-LAPACK_005fLIBS"></a> <code class="calibre6">LAPACK_LIBS</code>, but this will only be used if --with-lapack is specified (as the default value is <code class="calibre6">no</code>) and the BLAS library does not contain LAPACK.</p>
<p>Since ACML contains a full LAPACK, if selected as the BLAS it can be used as the LAPACK <em>via</em> --with-lapack.</p>
<p>If you do use --with-lapack, be aware of potential problems with bugs in the LAPACK sources (or in the posted corrections to those sources). In particular, bugs in <code class="calibre6">DGEEV</code> and <code class="calibre6">DGESDD</code> have resulted in error messages such as</p>
<div class="example">
<pre class="example1"><code>DGEBRD gave error code -10</code></pre>
</div>
<p>. Other potential problems are incomplete versions of the libraries, seen several times in Linux distributions over the years.</p>
<p>Please <strong>do</strong> bear in mind that using --with-lapack is ‘definitely <strong>not</strong> recommended’: it is provided <strong>only</strong> because it is necessary on some platforms and because some users want to experiment with claimed performance improvements. Reporting problems where it is used unnecessarily will simply irritate the R helpers.</p>
<p>Note too the comments about ISO/IEC 60559 compliance in the section of external BLAS: these apply equally to an external LAPACK, and for example the Intel MKL documentation says</p>
<blockquote>
<p>LAPACK routines assume that input matrices do not contain IEEE 754 special values such as INF or NaN values. Using these special values may cause LAPACK to return unexpected results or become unstable.</p>
</blockquote>
<p>We rely on limited support in LAPACK for matrices with <em>2^{31}</em> or more elements: it is quite possible that an external LAPACK will not have that support.</p>
<p>If you have a pure FORTRAN 77 compiler which cannot compile LAPACK it may be possible to use CLAPACK from <a href="http://www.netlib.org/clapack/" class="uri">http://www.netlib.org/clapack/</a> by something like</p>
<div class="example">
<pre class="example1"><code>-with-lapack=&quot;-lclapack -lf2c&quot;</code></pre>
</div>
<p>provided these were built with position-independent code and the calling conventions for double complex function return values match those in the BLAS used, so it may be simpler to use CLAPACK built to use CBLAS and</p>
<div class="example">
<pre class="example1"><code>-with-lapack=&quot;-lclapack -lcblas -lf2c&quot;</code></pre>
</div>
<hr />
<p><a href="" id="Caveats"></a> <a href="" id="Caveats-1"></a></p>
<h4 id="a.3.3-caveats" class="subsection">A.3.3 Caveats</h4>
<p>As with all libraries, you need to ensure that they and R were compiled with compatible compilers and flags. For example, this has meant that on Sun Sparc using the native compilers the flag -dalign is needed if <code class="calibre6">sunperf</code> is to be used.</p>
<p>On some systems it has been necessary that an external BLAS/LAPACK was built with the same FORTRAN compiler used to build R.</p>
<hr />
<p><a href="" id="Configuration-on-a-Unix_002dalike"></a> <a href="" id="Configuration-on-a-Unix_002dalike-1"></a></p>
